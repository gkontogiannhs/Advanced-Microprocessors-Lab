
Exercise3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  000002c6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031ed  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002365  00000000  00000000  000035f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b6  00000000  00000000  0000595e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00005e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000018b7  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000307  00000000  00000000  0000781b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00007b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_7>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_9>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_23>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_29>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  8c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	e6 ec       	ldi	r30, 0xC6	; 198
  a4:	f2 e0       	ldi	r31, 0x02	; 2
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>
  b2:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  b6:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <ADC_init>:
{
    /* stop timer */
    TCA0.SINGLE.CTRLA &= ~(TCA_SINGLE_ENABLE_bm);  
    
    /* force a hard reset */
    TCA0.SINGLE.CTRLESET = TCA_SINGLE_CMD_RESET_gc; 
  be:	e0 e0       	ldi	r30, 0x00	; 0
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	80 81       	ld	r24, Z
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	80 83       	st	Z, r24
  d2:	86 81       	ldd	r24, Z+6	; 0x06
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	86 83       	std	Z+6, r24	; 0x06
  d8:	84 85       	ldd	r24, Z+12	; 0x0c
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	84 87       	std	Z+12, r24	; 0x0c
  de:	82 89       	ldd	r24, Z+18	; 0x12
  e0:	93 89       	ldd	r25, Z+19	; 0x13
  e2:	85 60       	ori	r24, 0x05	; 5
  e4:	82 8b       	std	Z+18, r24	; 0x12
  e6:	93 8b       	std	Z+19, r25	; 0x13
  e8:	82 85       	ldd	r24, Z+10	; 0x0a
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	82 87       	std	Z+10, r24	; 0x0a
  ee:	84 81       	ldd	r24, Z+4	; 0x04
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	84 83       	std	Z+4, r24	; 0x04
  f4:	78 94       	sei
  f6:	80 85       	ldd	r24, Z+8	; 0x08
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	80 87       	std	Z+8, r24	; 0x08
  fc:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 100:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 104:	89 2b       	or	r24, r25
 106:	d1 f7       	brne	.-12     	; 0xfc <ADC_init+0x3e>
 108:	08 95       	ret

0000010a <TCA0_set_periods>:
}


void TCA0_set_periods(int L_period, int H_period, int L_duty, int H_duty){
	/* set the PWM frequencies and duty cycles */
	TCA0.SPLIT.LPER = L_period;
 10a:	e0 e0       	ldi	r30, 0x00	; 0
 10c:	fa e0       	ldi	r31, 0x0A	; 10
 10e:	86 a3       	std	Z+38, r24	; 0x26
	TCA0.SPLIT.LCMP0 = H_period;
 110:	60 a7       	std	Z+40, r22	; 0x28
		
	TCA0.SPLIT.HPER = L_duty;
 112:	47 a3       	std	Z+39, r20	; 0x27
	TCA0.SPLIT.HCMP0 = H_duty;
 114:	21 a7       	std	Z+41, r18	; 0x29
 116:	08 95       	ret

00000118 <TCA0_init>:
void TCA0_init(void);
void PIN_init(void);
void TCA0_hardReset(void);

void TCA0_init(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
    /* set waveform output on PORT A */
    PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTA_gc;
 11c:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
    
    /* enable split mode */
    TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;                 
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	da e0       	ldi	r29, 0x0A	; 10
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	8b 83       	std	Y+3, r24	; 0x03
    
    TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm        /* enable compare channel 0 for the higher byte */
 128:	81 e1       	ldi	r24, 0x11	; 17
 12a:	89 83       	std	Y+1, r24	; 0x01
                     | TCA_SPLIT_LCMP0EN_bm;    /* enable compare channel 0 for the lower byte */
					 
	// by default 128 resolution
	TCA0_set_periods(128, 128, 64, 64);
 12c:	20 e4       	ldi	r18, 0x40	; 64
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e4       	ldi	r20, 0x40	; 64
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	60 e8       	ldi	r22, 0x80	; 128
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 85 00 	call	0x10a	; 0x10a <TCA0_set_periods>
    
    TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV16_gc    /* set clock source (sys_clk/16) */
 140:	89 e0       	ldi	r24, 0x09	; 9
 142:	88 83       	st	Y, r24
                     | TCA_SPLIT_ENABLE_bm;         /* start timer */
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <main>:
}

int main(void)
{
	
    PORTD.DIR |= PIN0_bm    /* set pin 0 of PORT A as output */
 14a:	e0 e6       	ldi	r30, 0x60	; 96
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	80 81       	ld	r24, Z
 150:	87 60       	ori	r24, 0x07	; 7
 152:	80 83       	st	Z, r24
              | PIN1_bm    /* set pin 1 of PORT A as output */
			  | PIN2_bm;
    // all off			  
	PORTD.OUT |= PIN0_bm;
 154:	84 81       	ldd	r24, Z+4	; 0x04
 156:	81 60       	ori	r24, 0x01	; 1
 158:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT |= PIN1_bm;
 15a:	84 81       	ldd	r24, Z+4	; 0x04
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT |= PIN2_bm;
 160:	84 81       	ldd	r24, Z+4	; 0x04
 162:	84 60       	ori	r24, 0x04	; 4
 164:	84 83       	std	Z+4, r24	; 0x04
	
	// set switches
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 166:	e0 ea       	ldi	r30, 0xA0	; 160
 168:	f4 e0       	ldi	r31, 0x04	; 4
 16a:	85 89       	ldd	r24, Z+21	; 0x15
 16c:	89 60       	ori	r24, 0x09	; 9
 16e:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 170:	86 89       	ldd	r24, Z+22	; 0x16
 172:	89 60       	ori	r24, 0x09	; 9
 174:	86 8b       	std	Z+22, r24	; 0x16
	
	ADC_init();
 176:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_init>
    TCA0_init();
 17a:	0e 94 8c 00 	call	0x118	; 0x118 <TCA0_init>
	
	sei();
 17e:	78 94       	sei
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0x36>

00000182 <__vector_23>:
	TCA0.SPLIT.HPER = L_duty;
	TCA0.SPLIT.HCMP0 = H_duty;
}


ISR(ADC0_WCOMP_vect){
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	int intflags = ADC0.INTFLAGS;
 194:	e0 e0       	ldi	r30, 0x00	; 0
 196:	f6 e0       	ldi	r31, 0x06	; 6
 198:	83 85       	ldd	r24, Z+11	; 0x0b
	ADC0.INTFLAGS = intflags;
 19a:	83 87       	std	Z+11, r24	; 0x0b
	
	// enable LED and wait command
	PORTD.OUTCLR = PIN2_bm;
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	89 ef       	ldi	r24, 0xF9	; 249
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <__vector_23+0x24>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <__vector_23+0x2a>
 1ac:	00 00       	nop
	_delay_ms(1);
	// TCA0.SPLIT.CTRLB = 0;
	stop_adc = 0;
 1ae:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 1b2:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_7>:

ISR(TCA0_OVF_vect){
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	// clear the interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
 1d8:	e0 e0       	ldi	r30, 0x00	; 0
 1da:	fa e0       	ldi	r31, 0x0A	; 10
 1dc:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 1de:	83 87       	std	Z+11, r24	; 0x0b
	PORTD.OUTCLR = PIN0_bm;
 1e0:	e0 e6       	ldi	r30, 0x60	; 96
 1e2:	f4 e0       	ldi	r31, 0x04	; 4
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	86 83       	std	Z+6, r24	; 0x06
	PORTD.OUTCLR = PIN1_bm;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	86 83       	std	Z+6, r24	; 0x06
}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_9>:

ISR(TCA0_CMP0_vect){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	int intflags = TCA0.SINGLE.INTFLAGS;
 20c:	e0 e0       	ldi	r30, 0x00	; 0
 20e:	fa e0       	ldi	r31, 0x0A	; 10
 210:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 212:	83 87       	std	Z+11, r24	; 0x0b
	PORTD.OUT |= PIN0_bm;
 214:	e0 e6       	ldi	r30, 0x60	; 96
 216:	f4 e0       	ldi	r31, 0x04	; 4
 218:	84 81       	ldd	r24, Z+4	; 0x04
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT |= PIN1_bm;
 21e:	84 81       	ldd	r24, Z+4	; 0x04
 220:	82 60       	ori	r24, 0x02	; 2
 222:	84 83       	std	Z+4, r24	; 0x04
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_29>:


ISR(PORTF_PORT_vect){
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
 256:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
	// TURN OFF DECISION LED
	PORTD.OUT |= PIN2_bm;
 25a:	e0 e6       	ldi	r30, 0x60	; 96
 25c:	f4 e0       	ldi	r31, 0x04	; 4
 25e:	94 81       	ldd	r25, Z+4	; 0x04
 260:	94 60       	ori	r25, 0x04	; 4
 262:	94 83       	std	Z+4, r25	; 0x04
	if (intflags &= ~(00100000)){
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	00 97       	sbiw	r24, 0x00	; 0
 268:	59 f0       	breq	.+22     	; 0x280 <__vector_29+0x4c>
		TCA0_set_periods(64, 128, 32, 64);
 26a:	20 e4       	ldi	r18, 0x40	; 64
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e2       	ldi	r20, 0x20	; 32
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	60 e8       	ldi	r22, 0x80	; 128
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	80 e4       	ldi	r24, 0x40	; 64
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 85 00 	call	0x10a	; 0x10a <TCA0_set_periods>
 27e:	0c c0       	rjmp	.+24     	; 0x298 <__vector_29+0x64>
	}
	else if (intflags &= ~(01000000)){
 280:	89 2b       	or	r24, r25
 282:	51 f0       	breq	.+20     	; 0x298 <__vector_29+0x64>
		TCA0_set_periods(128, 64, 64, 32);
 284:	20 e2       	ldi	r18, 0x20	; 32
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e4       	ldi	r20, 0x40	; 64
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	60 e4       	ldi	r22, 0x40	; 64
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 85 00 	call	0x10a	; 0x10a <TCA0_set_periods>
	}
	stop_adc = 0;
 298:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 29c:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
