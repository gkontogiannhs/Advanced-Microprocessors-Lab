
GccApplication11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00802804  00802804  000004ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cad  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022a8  00000000  00000000  000031fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043e  00000000  00000000  000054a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000058e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014a8  00000000  00000000  00005968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c4  00000000  00000000  00006e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00006fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a4 e0       	ldi	r26, 0x04	; 4
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a8 30       	cpi	r26, 0x08	; 8
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	e6 e1       	ldi	r30, 0x16	; 22
  b4:	f4 e0       	ldi	r31, 0x04	; 4
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
{
	int rn = 0;
	int flag = 0;
	
	// PIN0 --> pedestrians --> initially off
	PORTD.DIR |= PIN0_bm;
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm;
  d8:	84 81       	ldd	r24, Z+4	; 0x04
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	84 83       	std	Z+4, r24	; 0x04
	
	/// PIN1 --> small road --> initially off
	PORTD.DIR |= PIN1_bm;
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
	PORTD.OUT |= PIN1_bm;
  e4:	84 81       	ldd	r24, Z+4	; 0x04
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	84 83       	std	Z+4, r24	; 0x04
	
	// PIN2 --> big road --> initially on
	PORTD.DIR |= PIN2_bm;
  ea:	80 81       	ld	r24, Z
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	80 83       	st	Z, r24
	PORTD.OUTCLR = PIN2_bm;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	86 83       	std	Z+6, r24	; 0x06
	
	//enable flag interrupts
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
  f4:	e0 ea       	ldi	r30, 0xA0	; 160
  f6:	f4 e0       	ldi	r31, 0x04	; 4
  f8:	85 89       	ldd	r24, Z+21	; 0x15
  fa:	89 60       	ori	r24, 0x09	; 9
  fc:	85 8b       	std	Z+21, r24	; 0x15
	
	// initialize timer
	TCA0.SINGLE.CNT = 0;
  fe:	e0 e0       	ldi	r30, 0x00	; 0
 100:	fa e0       	ldi	r31, 0x0A	; 10
 102:	10 a2       	std	Z+32, r1	; 0x20
 104:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SINGLE.CTRLB = 0;
 106:	11 82       	std	Z+1, r1	; 0x01
	// time for pedestrians
	TCA0.SINGLE.CMP0 = ped;
 108:	8e e1       	ldi	r24, 0x1E	; 30
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	80 a7       	std	Z+40, r24	; 0x28
 10e:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;
 110:	8e e0       	ldi	r24, 0x0E	; 14
 112:	80 83       	st	Z, r24
int interr_p = 0;

int main(void)
{
	int rn = 0;
	int flag = 0;
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d0 e0       	ldi	r29, 0x00	; 0
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;

	while(1)
	{
		// check for flag interr
		sei();
 118:	78 94       	sei
		// while no pedestrians
		while(!interr_f)
 11a:	25 c0       	rjmp	.+74     	; 0x166 <__EEPROM_REGION_LENGTH__+0x66>
		{
			rn = rand() % 10;
 11c:	0e 94 96 01 	call	0x32c	; 0x32c <rand>
 120:	6a e0       	ldi	r22, 0x0A	; 10
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 22 01 	call	0x244	; 0x244 <__divmodhi4>
			// if car traced
			if(rn == 0 || rn == 5 || rn == 8)
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	29 f0       	breq	.+10     	; 0x136 <__EEPROM_REGION_LENGTH__+0x36>
 12c:	85 30       	cpi	r24, 0x05	; 5
 12e:	91 05       	cpc	r25, r1
 130:	11 f0       	breq	.+4      	; 0x136 <__EEPROM_REGION_LENGTH__+0x36>
 132:	08 97       	sbiw	r24, 0x08	; 8
 134:	79 f4       	brne	.+30     	; 0x154 <__EEPROM_REGION_LENGTH__+0x54>
				
				// set flag
				flag = 1;
				
				// turn red big road
				PORTD.OUT |= PIN2_bm;
 136:	e0 e6       	ldi	r30, 0x60	; 96
 138:	f4 e0       	ldi	r31, 0x04	; 4
 13a:	84 81       	ldd	r24, Z+4	; 0x04
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <__EEPROM_REGION_LENGTH__+0x44>
 148:	00 c0       	rjmp	.+0      	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
 14a:	00 00       	nop
				
				// wait some time before small road turns green
				_delay_ms(del_min);
				
				// turn green small road
				PORTD.OUTCLR = PIN1_bm;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	86 83       	std	Z+6, r24	; 0x06
			// if car traced
			if(rn == 0 || rn == 5 || rn == 8)
			{
				
				// set flag
				flag = 1;
 150:	c1 e0       	ldi	r28, 0x01	; 1
 152:	d0 e0       	ldi	r29, 0x00	; 0
				// turn green small road
				PORTD.OUTCLR = PIN1_bm;
			}
			
			// turn it back green if it was set red
			if(flag)
 154:	20 97       	sbiw	r28, 0x00	; 0
 156:	39 f0       	breq	.+14     	; 0x166 <__EEPROM_REGION_LENGTH__+0x66>
			{
				PORTD.OUT |= PIN1_bm;
 158:	e0 e6       	ldi	r30, 0x60	; 96
 15a:	f4 e0       	ldi	r31, 0x04	; 4
 15c:	84 81       	ldd	r24, Z+4	; 0x04
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	84 83       	std	Z+4, r24	; 0x04
				PORTD.OUTCLR = PIN2_bm;
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	86 83       	std	Z+6, r24	; 0x06
	while(1)
	{
		// check for flag interr
		sei();
		// while no pedestrians
		while(!interr_f)
 166:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <interr_f>
 16a:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <interr_f+0x1>
 16e:	89 2b       	or	r24, r25
 170:	a9 f2       	breq	.-86     	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
				PORTD.OUTCLR = PIN2_bm;
			}
		}
		
		// big road, turn red
		PORTD.OUT |= PIN2_bm;
 172:	e0 e6       	ldi	r30, 0x60	; 96
 174:	f4 e0       	ldi	r31, 0x04	; 4
 176:	84 81       	ldd	r24, Z+4	; 0x04
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	84 83       	std	Z+4, r24	; 0x04
		
		// enable timer
		TCA0.SINGLE.CTRLA |= 1;
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	ba e0       	ldi	r27, 0x0A	; 10
 180:	8c 91       	ld	r24, X
 182:	81 60       	ori	r24, 0x01	; 1
 184:	8c 93       	st	X, r24
		TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm;
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	1a 96       	adiw	r26, 0x0a	; 10
 18a:	8c 93       	st	X, r24
		
		// green for pedestrians
		PORTD.OUTCLR = PIN0_bm;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	86 83       	std	Z+6, r24	; 0x06
		
		//green for small road
		PORTD.OUTCLR = PIN1_bm;
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	86 83       	std	Z+6, r24	; 0x06
		
		sei();
 194:	78 94       	sei
		while(!interr_p){
 196:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
 19a:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <__data_end+0x1>
 19e:	89 2b       	or	r24, r25
 1a0:	d1 f3       	breq	.-12     	; 0x196 <__EEPROM_REGION_LENGTH__+0x96>
			// wait
		}
		cli();
 1a2:	f8 94       	cli
		
		// zero flag timer
		interr_p = 0;
 1a4:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <__data_end>
 1a8:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <__data_end+0x1>
		// red for pedestrians
		PORTD.OUT |= PIN0_bm;
 1ac:	e0 e6       	ldi	r30, 0x60	; 96
 1ae:	f4 e0       	ldi	r31, 0x04	; 4
 1b0:	84 81       	ldd	r24, Z+4	; 0x04
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	84 83       	std	Z+4, r24	; 0x04
		
		// zero pedestrian flag
		interr_f = 0;
 1b6:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <interr_f>
 1ba:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <interr_f+0x1>
		
		// red for small road
		PORTD.OUT |= PIN1_bm;
 1be:	84 81       	ldd	r24, Z+4	; 0x04
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	84 83       	std	Z+4, r24	; 0x04
		
		// turn back red for big
		PORTD.OUTCLR = PIN2_bm;
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	86 83       	std	Z+6, r24	; 0x06
		
		// empty counter
		TCA0.SINGLE.CNT = 0;
 1c8:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
 1cc:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
	}
 1d0:	a3 cf       	rjmp	.-186    	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>

000001d2 <__vector_29>:
	cli();
}


// flag interrupt
ISR(PORTF_PORT_vect){
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
 1e4:	e0 ea       	ldi	r30, 0xA0	; 160
 1e6:	f4 e0       	ldi	r31, 0x04	; 4
 1e8:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS = intflags;
 1ea:	81 87       	std	Z+9, r24	; 0x09
	interr_f = 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <interr_f>
 1f4:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <interr_f+0x1>
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_9>:


// timer interrupt
ISR(TCA0_CMP0_vect){
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	TCA0.SINGLE.CTRLA = 0;
 21c:	e0 e0       	ldi	r30, 0x00	; 0
 21e:	fa e0       	ldi	r31, 0x0A	; 10
 220:	10 82       	st	Z, r1
	int intflags = TCA0.SINGLE.INTFLAGS;
 222:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 224:	83 87       	std	Z+11, r24	; 0x0b
	interr_p = 1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
 22e:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <__data_end+0x1>
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__divmodhi4>:
 244:	97 fb       	bst	r25, 7
 246:	07 2e       	mov	r0, r23
 248:	16 f4       	brtc	.+4      	; 0x24e <__divmodhi4+0xa>
 24a:	00 94       	com	r0
 24c:	07 d0       	rcall	.+14     	; 0x25c <__divmodhi4_neg1>
 24e:	77 fd       	sbrc	r23, 7
 250:	09 d0       	rcall	.+18     	; 0x264 <__divmodhi4_neg2>
 252:	0e 94 36 01 	call	0x26c	; 0x26c <__udivmodhi4>
 256:	07 fc       	sbrc	r0, 7
 258:	05 d0       	rcall	.+10     	; 0x264 <__divmodhi4_neg2>
 25a:	3e f4       	brtc	.+14     	; 0x26a <__divmodhi4_exit>

0000025c <__divmodhi4_neg1>:
 25c:	90 95       	com	r25
 25e:	81 95       	neg	r24
 260:	9f 4f       	sbci	r25, 0xFF	; 255
 262:	08 95       	ret

00000264 <__divmodhi4_neg2>:
 264:	70 95       	com	r23
 266:	61 95       	neg	r22
 268:	7f 4f       	sbci	r23, 0xFF	; 255

0000026a <__divmodhi4_exit>:
 26a:	08 95       	ret

0000026c <__udivmodhi4>:
 26c:	aa 1b       	sub	r26, r26
 26e:	bb 1b       	sub	r27, r27
 270:	51 e1       	ldi	r21, 0x11	; 17
 272:	07 c0       	rjmp	.+14     	; 0x282 <__udivmodhi4_ep>

00000274 <__udivmodhi4_loop>:
 274:	aa 1f       	adc	r26, r26
 276:	bb 1f       	adc	r27, r27
 278:	a6 17       	cp	r26, r22
 27a:	b7 07       	cpc	r27, r23
 27c:	10 f0       	brcs	.+4      	; 0x282 <__udivmodhi4_ep>
 27e:	a6 1b       	sub	r26, r22
 280:	b7 0b       	sbc	r27, r23

00000282 <__udivmodhi4_ep>:
 282:	88 1f       	adc	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	5a 95       	dec	r21
 288:	a9 f7       	brne	.-22     	; 0x274 <__udivmodhi4_loop>
 28a:	80 95       	com	r24
 28c:	90 95       	com	r25
 28e:	bc 01       	movw	r22, r24
 290:	cd 01       	movw	r24, r26
 292:	08 95       	ret

00000294 <do_rand>:
 294:	8f 92       	push	r8
 296:	9f 92       	push	r9
 298:	af 92       	push	r10
 29a:	bf 92       	push	r11
 29c:	cf 92       	push	r12
 29e:	df 92       	push	r13
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
 2aa:	68 81       	ld	r22, Y
 2ac:	79 81       	ldd	r23, Y+1	; 0x01
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	9b 81       	ldd	r25, Y+3	; 0x03
 2b2:	61 15       	cp	r22, r1
 2b4:	71 05       	cpc	r23, r1
 2b6:	81 05       	cpc	r24, r1
 2b8:	91 05       	cpc	r25, r1
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <do_rand+0x30>
 2bc:	64 e2       	ldi	r22, 0x24	; 36
 2be:	79 ed       	ldi	r23, 0xD9	; 217
 2c0:	8b e5       	ldi	r24, 0x5B	; 91
 2c2:	97 e0       	ldi	r25, 0x07	; 7
 2c4:	2d e1       	ldi	r18, 0x1D	; 29
 2c6:	33 ef       	ldi	r19, 0xF3	; 243
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	0e 94 a6 01 	call	0x34c	; 0x34c <__divmodsi4>
 2d0:	49 01       	movw	r8, r18
 2d2:	5a 01       	movw	r10, r20
 2d4:	9b 01       	movw	r18, r22
 2d6:	ac 01       	movw	r20, r24
 2d8:	a7 ea       	ldi	r26, 0xA7	; 167
 2da:	b1 e4       	ldi	r27, 0x41	; 65
 2dc:	0e 94 c5 01 	call	0x38a	; 0x38a <__muluhisi3>
 2e0:	6b 01       	movw	r12, r22
 2e2:	7c 01       	movw	r14, r24
 2e4:	ac ee       	ldi	r26, 0xEC	; 236
 2e6:	b4 ef       	ldi	r27, 0xF4	; 244
 2e8:	a5 01       	movw	r20, r10
 2ea:	94 01       	movw	r18, r8
 2ec:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__mulohisi3>
 2f0:	dc 01       	movw	r26, r24
 2f2:	cb 01       	movw	r24, r22
 2f4:	8c 0d       	add	r24, r12
 2f6:	9d 1d       	adc	r25, r13
 2f8:	ae 1d       	adc	r26, r14
 2fa:	bf 1d       	adc	r27, r15
 2fc:	b7 ff       	sbrs	r27, 7
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <do_rand+0x72>
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	a1 09       	sbc	r26, r1
 304:	b0 48       	sbci	r27, 0x80	; 128
 306:	88 83       	st	Y, r24
 308:	99 83       	std	Y+1, r25	; 0x01
 30a:	aa 83       	std	Y+2, r26	; 0x02
 30c:	bb 83       	std	Y+3, r27	; 0x03
 30e:	9f 77       	andi	r25, 0x7F	; 127
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	ff 90       	pop	r15
 316:	ef 90       	pop	r14
 318:	df 90       	pop	r13
 31a:	cf 90       	pop	r12
 31c:	bf 90       	pop	r11
 31e:	af 90       	pop	r10
 320:	9f 90       	pop	r9
 322:	8f 90       	pop	r8
 324:	08 95       	ret

00000326 <rand_r>:
 326:	0e 94 4a 01 	call	0x294	; 0x294 <do_rand>
 32a:	08 95       	ret

0000032c <rand>:
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	98 e2       	ldi	r25, 0x28	; 40
 330:	0e 94 4a 01 	call	0x294	; 0x294 <do_rand>
 334:	08 95       	ret

00000336 <srand>:
 336:	a0 e0       	ldi	r26, 0x00	; 0
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 33e:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 342:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 346:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 34a:	08 95       	ret

0000034c <__divmodsi4>:
 34c:	05 2e       	mov	r0, r21
 34e:	97 fb       	bst	r25, 7
 350:	1e f4       	brtc	.+6      	; 0x358 <__divmodsi4+0xc>
 352:	00 94       	com	r0
 354:	0e 94 bd 01 	call	0x37a	; 0x37a <__negsi2>
 358:	57 fd       	sbrc	r21, 7
 35a:	07 d0       	rcall	.+14     	; 0x36a <__divmodsi4_neg2>
 35c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__udivmodsi4>
 360:	07 fc       	sbrc	r0, 7
 362:	03 d0       	rcall	.+6      	; 0x36a <__divmodsi4_neg2>
 364:	4e f4       	brtc	.+18     	; 0x378 <__divmodsi4_exit>
 366:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__negsi2>

0000036a <__divmodsi4_neg2>:
 36a:	50 95       	com	r21
 36c:	40 95       	com	r20
 36e:	30 95       	com	r19
 370:	21 95       	neg	r18
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	4f 4f       	sbci	r20, 0xFF	; 255
 376:	5f 4f       	sbci	r21, 0xFF	; 255

00000378 <__divmodsi4_exit>:
 378:	08 95       	ret

0000037a <__negsi2>:
 37a:	90 95       	com	r25
 37c:	80 95       	com	r24
 37e:	70 95       	com	r23
 380:	61 95       	neg	r22
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	8f 4f       	sbci	r24, 0xFF	; 255
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	08 95       	ret

0000038a <__muluhisi3>:
 38a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__umulhisi3>
 38e:	a5 9f       	mul	r26, r21
 390:	90 0d       	add	r25, r0
 392:	b4 9f       	mul	r27, r20
 394:	90 0d       	add	r25, r0
 396:	a4 9f       	mul	r26, r20
 398:	80 0d       	add	r24, r0
 39a:	91 1d       	adc	r25, r1
 39c:	11 24       	eor	r1, r1
 39e:	08 95       	ret

000003a0 <__mulshisi3>:
 3a0:	b7 ff       	sbrs	r27, 7
 3a2:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__muluhisi3>

000003a6 <__mulohisi3>:
 3a6:	0e 94 c5 01 	call	0x38a	; 0x38a <__muluhisi3>
 3aa:	82 1b       	sub	r24, r18
 3ac:	93 0b       	sbc	r25, r19
 3ae:	08 95       	ret

000003b0 <__udivmodsi4>:
 3b0:	a1 e2       	ldi	r26, 0x21	; 33
 3b2:	1a 2e       	mov	r1, r26
 3b4:	aa 1b       	sub	r26, r26
 3b6:	bb 1b       	sub	r27, r27
 3b8:	fd 01       	movw	r30, r26
 3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <__udivmodsi4_ep>

000003bc <__udivmodsi4_loop>:
 3bc:	aa 1f       	adc	r26, r26
 3be:	bb 1f       	adc	r27, r27
 3c0:	ee 1f       	adc	r30, r30
 3c2:	ff 1f       	adc	r31, r31
 3c4:	a2 17       	cp	r26, r18
 3c6:	b3 07       	cpc	r27, r19
 3c8:	e4 07       	cpc	r30, r20
 3ca:	f5 07       	cpc	r31, r21
 3cc:	20 f0       	brcs	.+8      	; 0x3d6 <__udivmodsi4_ep>
 3ce:	a2 1b       	sub	r26, r18
 3d0:	b3 0b       	sbc	r27, r19
 3d2:	e4 0b       	sbc	r30, r20
 3d4:	f5 0b       	sbc	r31, r21

000003d6 <__udivmodsi4_ep>:
 3d6:	66 1f       	adc	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	1a 94       	dec	r1
 3e0:	69 f7       	brne	.-38     	; 0x3bc <__udivmodsi4_loop>
 3e2:	60 95       	com	r22
 3e4:	70 95       	com	r23
 3e6:	80 95       	com	r24
 3e8:	90 95       	com	r25
 3ea:	9b 01       	movw	r18, r22
 3ec:	ac 01       	movw	r20, r24
 3ee:	bd 01       	movw	r22, r26
 3f0:	cf 01       	movw	r24, r30
 3f2:	08 95       	ret

000003f4 <__umulhisi3>:
 3f4:	a2 9f       	mul	r26, r18
 3f6:	b0 01       	movw	r22, r0
 3f8:	b3 9f       	mul	r27, r19
 3fa:	c0 01       	movw	r24, r0
 3fc:	a3 9f       	mul	r26, r19
 3fe:	70 0d       	add	r23, r0
 400:	81 1d       	adc	r24, r1
 402:	11 24       	eor	r1, r1
 404:	91 1d       	adc	r25, r1
 406:	b2 9f       	mul	r27, r18
 408:	70 0d       	add	r23, r0
 40a:	81 1d       	adc	r24, r1
 40c:	11 24       	eor	r1, r1
 40e:	91 1d       	adc	r25, r1
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
