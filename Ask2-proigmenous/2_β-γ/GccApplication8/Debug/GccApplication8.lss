
GccApplication8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00802802  00802802  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000298b  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002304  00000000  00000000  00002d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000474  00000000  00000000  00005063  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000054d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000146e  00000000  00000000  000055b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020e  00000000  00000000  00006a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00006c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_23>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	e4 e8       	ldi	r30, 0x84	; 132
  a4:	f2 e0       	ldi	r31, 0x02	; 2
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	28 e2       	ldi	r18, 0x28	; 40
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b8 e2       	ldi	r27, 0x28	; 40
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

int main(void)
{	

	// PIN0, turn left
	PORTD.DIR |= PIN0_bm;
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm;
  d8:	84 81       	ldd	r24, Z+4	; 0x04
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	84 83       	std	Z+4, r24	; 0x04
	
	// PIN1, turn right
	PORTD.DIR |= PIN1_bm;
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
	PORTD.OUT |= PIN1_bm;
  e4:	84 81       	ldd	r24, Z+4	; 0x04
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	84 83       	std	Z+4, r24	; 0x04
	
	// PIN2, represents straight line
	PORTD.DIR |= PIN2_bm;
  ea:	80 81       	ld	r24, Z
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	80 83       	st	Z, r24
	// turn on straight's led
	PORTD.OUTCLR = PIN2_bm;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	86 83       	std	Z+6, r24	; 0x06
	

	// initialize ADC
	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;
  f4:	e0 e0       	ldi	r30, 0x00	; 0
  f6:	f6 e0       	ldi	r31, 0x06	; 6
  f8:	80 81       	ld	r24, Z
  fa:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_FREERUN_bm;
  fc:	80 81       	ld	r24, Z
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_ENABLE_bm;
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
	ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc;
 108:	86 81       	ldd	r24, Z+6	; 0x06
 10a:	87 60       	ori	r24, 0x07	; 7
 10c:	86 83       	std	Z+6, r24	; 0x06
	
	ADC0.DBGCTRL |= ADC_DBGRUN_bm;
 10e:	84 85       	ldd	r24, Z+12	; 0x0c
 110:	81 60       	ori	r24, 0x01	; 1
 112:	84 87       	std	Z+12, r24	; 0x0c
	
	// limit is 5
	ADC0.WINLT |= 5;
 114:	82 89       	ldd	r24, Z+18	; 0x12
 116:	93 89       	ldd	r25, Z+19	; 0x13
 118:	85 60       	ori	r24, 0x05	; 5
 11a:	82 8b       	std	Z+18, r24	; 0x12
 11c:	93 8b       	std	Z+19, r25	; 0x13
	ADC0.INTCTRL |= ADC_WCMP_bm;
 11e:	82 85       	ldd	r24, Z+10	; 0x0a
 120:	82 60       	ori	r24, 0x02	; 2
 122:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE |= ADC_WINCM0_bm;
 124:	84 81       	ldd	r24, Z+4	; 0x04
 126:	81 60       	ori	r24, 0x01	; 1
 128:	84 83       	std	Z+4, r24	; 0x04
	
		// int
	PORTF.PIN5CTRL |= (PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc);
 12a:	a0 ea       	ldi	r26, 0xA0	; 160
 12c:	b4 e0       	ldi	r27, 0x04	; 4
 12e:	55 96       	adiw	r26, 0x15	; 21
 130:	8c 91       	ld	r24, X
 132:	55 97       	sbiw	r26, 0x15	; 21
 134:	89 60       	ori	r24, 0x09	; 9
 136:	55 96       	adiw	r26, 0x15	; 21
 138:	8c 93       	st	X, r24
	
	sei();
 13a:	78 94       	sei
	// start conversion
	ADC0.COMMAND |= ADC_STCONV_bm;
 13c:	80 85       	ldd	r24, Z+8	; 0x08
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 87       	std	Z+8, r24	; 0x08
		
	while(still){
 142:	03 c0       	rjmp	.+6      	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
		// go straight
		PORTD.OUTCLR = PIN2_bm;
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
	
	sei();
	// start conversion
	ADC0.COMMAND |= ADC_STCONV_bm;
		
	while(still){
 14a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 14e:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 152:	89 2b       	or	r24, r25
 154:	b9 f7       	brne	.-18     	; 0x144 <__EEPROM_REGION_LENGTH__+0x44>
		// go straight
		PORTD.OUTCLR = PIN2_bm;
	}
}
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	08 95       	ret

0000015c <__vector_29>:
	if(cnt >= 7)
		still = 0;
	
}

ISR(PORTF_PORT_vect) {
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
 16e:	e0 ea       	ldi	r30, 0xA0	; 160
 170:	f4 e0       	ldi	r31, 0x04	; 4
 172:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS = intflags;
 174:	81 87       	std	Z+9, r24	; 0x09
	r = 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
 17e:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <__data_end+0x1>
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <turnLeft>:


void turnLeft(){
	
	// turn straight led off
	PORTD.OUT |= PIN2_bm;
 194:	e0 e6       	ldi	r30, 0x60	; 96
 196:	f4 e0       	ldi	r31, 0x04	; 4
 198:	84 81       	ldd	r24, Z+4	; 0x04
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	84 83       	std	Z+4, r24	; 0x04
	// turn on left led
	PORTD.OUTCLR = PIN0_bm;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	83 ef       	ldi	r24, 0xF3	; 243
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <turnLeft+0x12>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <turnLeft+0x18>
 1ac:	00 00       	nop
	_delay_ms(2);
	// turn off left led
	PORTD.OUT |= PIN0_bm;
 1ae:	84 81       	ldd	r24, Z+4	; 0x04
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	84 83       	std	Z+4, r24	; 0x04
	// turn straight led on
	PORTD.OUTCLR = PIN2_bm;
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	86 83       	std	Z+6, r24	; 0x06
 1b8:	08 95       	ret

000001ba <turnRight>:
}

void turnRight(){
	
	// turn straight led off
	PORTD.OUT |= PIN2_bm;
 1ba:	e0 e6       	ldi	r30, 0x60	; 96
 1bc:	f4 e0       	ldi	r31, 0x04	; 4
 1be:	84 81       	ldd	r24, Z+4	; 0x04
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	84 83       	std	Z+4, r24	; 0x04
	// turn on right led
	PORTD.OUTCLR = PIN1_bm;
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	86 83       	std	Z+6, r24	; 0x06
 1c8:	83 ef       	ldi	r24, 0xF3	; 243
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <turnRight+0x12>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <turnRight+0x18>
 1d2:	00 00       	nop
	_delay_ms(2);
	// turn off left led
	PORTD.OUT |= PIN1_bm;
 1d4:	84 81       	ldd	r24, Z+4	; 0x04
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	84 83       	std	Z+4, r24	; 0x04
	// turn straight led on
	PORTD.OUTCLR = PIN2_bm;
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	86 83       	std	Z+6, r24	; 0x06
 1de:	08 95       	ret

000001e0 <__vector_23>:
		PORTD.OUTCLR = PIN2_bm;
	}
}


ISR(ADC0_WCOMP_vect){
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	int intflags = ADC0.INTFLAGS;
 202:	e0 e0       	ldi	r30, 0x00	; 0
 204:	f6 e0       	ldi	r31, 0x06	; 6
 206:	83 85       	ldd	r24, Z+11	; 0x0b
	ADC0.INTFLAGS = intflags;
 208:	83 87       	std	Z+11, r24	; 0x0b
	// increase counter
	cnt++;
 20a:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <cnt>
 20e:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <cnt+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <cnt>
 218:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <cnt+0x1>
	// if 1, 4, 5, 6, 7, turn left
	if(cnt == 1 || cnt == 4 || cnt == 5 || cnt == 6 || cnt == 7){
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	91 05       	cpc	r25, r1
 220:	61 f0       	breq	.+24     	; 0x23a <__vector_23+0x5a>
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	91 05       	cpc	r25, r1
 226:	49 f0       	breq	.+18     	; 0x23a <__vector_23+0x5a>
 228:	85 30       	cpi	r24, 0x05	; 5
 22a:	91 05       	cpc	r25, r1
 22c:	31 f0       	breq	.+12     	; 0x23a <__vector_23+0x5a>
 22e:	86 30       	cpi	r24, 0x06	; 6
 230:	91 05       	cpc	r25, r1
 232:	19 f0       	breq	.+6      	; 0x23a <__vector_23+0x5a>
 234:	87 30       	cpi	r24, 0x07	; 7
 236:	91 05       	cpc	r25, r1
 238:	19 f4       	brne	.+6      	; 0x240 <__vector_23+0x60>
		turnLeft();
 23a:	0e 94 ca 00 	call	0x194	; 0x194 <turnLeft>
	int intflags = ADC0.INTFLAGS;
	ADC0.INTFLAGS = intflags;
	// increase counter
	cnt++;
	// if 1, 4, 5, 6, 7, turn left
	if(cnt == 1 || cnt == 4 || cnt == 5 || cnt == 6 || cnt == 7){
 23e:	05 c0       	rjmp	.+10     	; 0x24a <__vector_23+0x6a>
		turnLeft();
	}
	// if 2, 3 turn right
	else if(cnt == 2 || cnt == 3){
 240:	02 97       	sbiw	r24, 0x02	; 2
 242:	02 97       	sbiw	r24, 0x02	; 2
 244:	10 f4       	brcc	.+4      	; 0x24a <__vector_23+0x6a>
		turnRight();
 246:	0e 94 dd 00 	call	0x1ba	; 0x1ba <turnRight>
	}
	
	// if perimeter completed
	if(cnt >= 7)
 24a:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <cnt>
 24e:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <cnt+0x1>
 252:	07 97       	sbiw	r24, 0x07	; 7
 254:	24 f0       	brlt	.+8      	; 0x25e <__vector_23+0x7e>
		still = 0;
 256:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 25a:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
	
}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
