
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002837  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002295  00000000  00000000  00002ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037c  00000000  00000000  00004d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000050e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000013aa  00000000  00000000  0000513c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  000064e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000065ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_23>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  8c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	e0 e9       	ldi	r30, 0x90	; 144
  a4:	f1 e0       	ldi	r31, 0x01	; 1
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:

int main(void)
{	

	// PIN0, turn left
	PORTD.DIR |= PIN0_bm;
  be:	e0 e6       	ldi	r30, 0x60	; 96
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm;
  c8:	84 81       	ldd	r24, Z+4	; 0x04
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	84 83       	std	Z+4, r24	; 0x04
	
	// PIN1, turn right
	//PORTD.DIR |= PIN1_bm;
	
	// PIN2, represents straight line
	PORTD.DIR |= PIN2_bm;
  ce:	80 81       	ld	r24, Z
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	80 83       	st	Z, r24
	// turn on straight's led
	PORTD.OUTCLR = PIN2_bm;
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	86 83       	std	Z+6, r24	; 0x06
	
	// initialize ADC
	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	f6 e0       	ldi	r31, 0x06	; 6
  dc:	80 81       	ld	r24, Z
  de:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_FREERUN_bm;
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_ENABLE_bm;
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
	ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc;
  ec:	86 81       	ldd	r24, Z+6	; 0x06
  ee:	87 60       	ori	r24, 0x07	; 7
  f0:	86 83       	std	Z+6, r24	; 0x06
	
	ADC0.DBGCTRL |= ADC_DBGRUN_bm;
  f2:	84 85       	ldd	r24, Z+12	; 0x0c
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	84 87       	std	Z+12, r24	; 0x0c
	
	// limit is 5
	ADC0.WINLT |= 5;
  f8:	82 89       	ldd	r24, Z+18	; 0x12
  fa:	93 89       	ldd	r25, Z+19	; 0x13
  fc:	85 60       	ori	r24, 0x05	; 5
  fe:	82 8b       	std	Z+18, r24	; 0x12
 100:	93 8b       	std	Z+19, r25	; 0x13
	ADC0.INTCTRL |= ADC_WCMP_bm;
 102:	82 85       	ldd	r24, Z+10	; 0x0a
 104:	82 60       	ori	r24, 0x02	; 2
 106:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE |= ADC_WINCM0_bm;
 108:	84 81       	ldd	r24, Z+4	; 0x04
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	84 83       	std	Z+4, r24	; 0x04
	
	sei();
 10e:	78 94       	sei
	
	// start conversion
	ADC0.COMMAND |= ADC_STCONV_bm;
 110:	80 85       	ldd	r24, Z+8	; 0x08
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 87       	std	Z+8, r24	; 0x08
	
	// if perimeter completed, stop/ exit programm
	if (len == 0)
 116:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 11a:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 11e:	89 2b       	or	r24, r25
 120:	09 f0       	breq	.+2      	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
 122:	ff cf       	rjmp	.-2      	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
		return 1;
		
	while(1){
		// walk straight
	}
}
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret

0000012a <__vector_23>:


ISR(ADC0_WCOMP_vect){
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	int intflags = ADC0.INTFLAGS;
 13c:	e0 e0       	ldi	r30, 0x00	; 0
 13e:	f6 e0       	ldi	r31, 0x06	; 6
 140:	83 85       	ldd	r24, Z+11	; 0x0b
	ADC0.INTFLAGS = intflags;
 142:	83 87       	std	Z+11, r24	; 0x0b
	// turn straight led off
	PORTD.OUT |= PIN2_bm;
 144:	e0 e6       	ldi	r30, 0x60	; 96
 146:	f4 e0       	ldi	r31, 0x04	; 4
 148:	84 81       	ldd	r24, Z+4	; 0x04
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	84 83       	std	Z+4, r24	; 0x04
	// turn on left led
	PORTD.OUTCLR = PIN0_bm;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	83 ef       	ldi	r24, 0xF3	; 243
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <__vector_23+0x2c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <__vector_23+0x32>
 15c:	00 00       	nop
	_delay_ms(2);
	// turn off left led
	PORTD.OUT |= PIN0_bm;
 15e:	84 81       	ldd	r24, Z+4	; 0x04
 160:	81 60       	ori	r24, 0x01	; 1
 162:	84 83       	std	Z+4, r24	; 0x04
	// turn straight led on
	PORTD.OUTCLR = PIN2_bm;
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	86 83       	std	Z+6, r24	; 0x06
	
	// reduce each side of the perimeter
	len -= 50;
 168:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 16c:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 170:	c2 97       	sbiw	r24, 0x32	; 50
 172:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 176:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
