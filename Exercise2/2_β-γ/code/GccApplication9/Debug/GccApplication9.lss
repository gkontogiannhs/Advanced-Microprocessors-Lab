
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00802802  00802802  0000043c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030d6  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002358  00000000  00000000  000035d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000516  00000000  00000000  0000592a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00005e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001700  00000000  00000000  00005f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000317  00000000  00000000  0000764c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00007963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_23>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	e6 ea       	ldi	r30, 0xA6	; 166
  a4:	f3 e0       	ldi	r31, 0x03	; 3
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	28 e2       	ldi	r18, 0x28	; 40
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b8 e2       	ldi	r27, 0x28	; 40
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  c6:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_9>:
	if(cnt >= 7 || cnt <= 0)
		still = 0;
	
}

ISR(TCA0_CMP0_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	//TCA0.SINGLE.CTRLA = 0; //Disable Timer
	TCA0.SINGLE.CTRLA &= 0xFE;
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	fa e0       	ldi	r31, 0x0A	; 10
  e4:	80 81       	ld	r24, Z
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	80 83       	st	Z, r24
	//Clear timer interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
  ea:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
  ec:	83 87       	std	Z+11, r24	; 0x0b
	t_interr = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <t_interr>
  f6:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <t_interr+0x1>
}
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <turnLeft>:


void turnLeft(){
	
	// turn straight led off
	PORTD.OUT |= PIN2_bm;
 10c:	e0 e6       	ldi	r30, 0x60	; 96
 10e:	f4 e0       	ldi	r31, 0x04	; 4
 110:	84 81       	ldd	r24, Z+4	; 0x04
 112:	84 60       	ori	r24, 0x04	; 4
 114:	84 83       	std	Z+4, r24	; 0x04
	// turn on left led
	PORTD.OUTCLR = PIN0_bm;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	86 83       	std	Z+6, r24	; 0x06
	//_delay_ms(2);
	// enable timer
	TCA0.SINGLE.CTRLA |= 1;
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	fa e0       	ldi	r31, 0x0A	; 10
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
	while(!t_interr){}
 124:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <t_interr>
 128:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <t_interr+0x1>
 12c:	89 2b       	or	r24, r25
 12e:	d1 f3       	breq	.-12     	; 0x124 <turnLeft+0x18>
	//TCA0.SINGLE.CTRLA &= 0xFE;
	// turn off left led
	PORTD.OUT |= PIN0_bm;
 130:	e0 e6       	ldi	r30, 0x60	; 96
 132:	f4 e0       	ldi	r31, 0x04	; 4
 134:	84 81       	ldd	r24, Z+4	; 0x04
 136:	81 60       	ori	r24, 0x01	; 1
 138:	84 83       	std	Z+4, r24	; 0x04
	// turn straight led on
	PORTD.OUTCLR = PIN2_bm;
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	86 83       	std	Z+6, r24	; 0x06
 13e:	08 95       	ret

00000140 <turnRight>:
}

void turnRight(){
	
	// turn straight led off
	PORTD.OUT |= PIN2_bm;
 140:	e0 e6       	ldi	r30, 0x60	; 96
 142:	f4 e0       	ldi	r31, 0x04	; 4
 144:	84 81       	ldd	r24, Z+4	; 0x04
 146:	84 60       	ori	r24, 0x04	; 4
 148:	84 83       	std	Z+4, r24	; 0x04
	// turn on right led
	PORTD.OUTCLR = PIN1_bm;
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	83 ef       	ldi	r24, 0xF3	; 243
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <turnRight+0x12>
 156:	00 c0       	rjmp	.+0      	; 0x158 <turnRight+0x18>
 158:	00 00       	nop
	_delay_ms(2);
	// turn off left led
	PORTD.OUT |= PIN1_bm;
 15a:	84 81       	ldd	r24, Z+4	; 0x04
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	84 83       	std	Z+4, r24	; 0x04
	// turn straight led on
	PORTD.OUTCLR = PIN2_bm;
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	86 83       	std	Z+6, r24	; 0x06
 164:	08 95       	ret

00000166 <__vector_23>:
			break;
	}
}


ISR(ADC0_WCOMP_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
	int intflags = ADC0.INTFLAGS;
 188:	e0 e0       	ldi	r30, 0x00	; 0
 18a:	f6 e0       	ldi	r31, 0x06	; 6
 18c:	83 85       	ldd	r24, Z+11	; 0x0b
	ADC0.INTFLAGS = intflags;
 18e:	83 87       	std	Z+11, r24	; 0x0b
	
	if(!reverse){
 190:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
 194:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <__data_end+0x1>
 198:	89 2b       	or	r24, r25
 19a:	09 f5       	brne	.+66     	; 0x1de <__vector_23+0x78>
		if (result <=5){
 19c:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <result>
 1a0:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <result+0x1>
 1a4:	86 30       	cpi	r24, 0x06	; 6
 1a6:	91 05       	cpc	r25, r1
 1a8:	64 f4       	brge	.+24     	; 0x1c2 <__vector_23+0x5c>
			cnt++;
 1aa:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <cnt>
 1ae:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <cnt+0x1>
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <cnt>
 1b8:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <cnt+0x1>
			turnLeft();
 1bc:	0e 94 86 00 	call	0x10c	; 0x10c <turnLeft>
 1c0:	2e c0       	rjmp	.+92     	; 0x21e <__vector_23+0xb8>

			}else if(result >= 20){
 1c2:	44 97       	sbiw	r24, 0x14	; 20
 1c4:	64 f1       	brlt	.+88     	; 0x21e <__vector_23+0xb8>
			cnt++;
 1c6:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <cnt>
 1ca:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <cnt+0x1>
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <cnt>
 1d4:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <cnt+0x1>
			turnRight();
 1d8:	0e 94 a0 00 	call	0x140	; 0x140 <turnRight>
 1dc:	20 c0       	rjmp	.+64     	; 0x21e <__vector_23+0xb8>
		}
	// reverse mode enabled
	}else{
		// increase counter
		if (result <=5){
 1de:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <result>
 1e2:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <result+0x1>
 1e6:	86 30       	cpi	r24, 0x06	; 6
 1e8:	91 05       	cpc	r25, r1
 1ea:	64 f4       	brge	.+24     	; 0x204 <__vector_23+0x9e>
			cnt--;
 1ec:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <cnt>
 1f0:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <cnt+0x1>
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <cnt>
 1fa:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <cnt+0x1>
			turnRight();
 1fe:	0e 94 a0 00 	call	0x140	; 0x140 <turnRight>
 202:	0d c0       	rjmp	.+26     	; 0x21e <__vector_23+0xb8>

			}else if(result >= 20){
 204:	44 97       	sbiw	r24, 0x14	; 20
 206:	5c f0       	brlt	.+22     	; 0x21e <__vector_23+0xb8>
			cnt--;
 208:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <cnt>
 20c:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <cnt+0x1>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <cnt>
 216:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <cnt+0x1>
			turnLeft();
 21a:	0e 94 86 00 	call	0x10c	; 0x10c <turnLeft>
		}
	}
	
	// if perimeter completed
	if(cnt >= 7 || cnt <= 0)
 21e:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <cnt>
 222:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <cnt+0x1>
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	06 97       	sbiw	r24, 0x06	; 6
 22a:	20 f0       	brcs	.+8      	; 0x234 <__vector_23+0xce>
		still = 0;
 22c:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 230:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
	
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <single>:
	PORTD.OUTCLR = PIN2_bm;
}


void single(){
	ADC0.CTRLA = 0;
 256:	e0 e0       	ldi	r30, 0x00	; 0
 258:	f6 e0       	ldi	r31, 0x06	; 6
 25a:	10 82       	st	Z, r1
	// initialize ADC
	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;
 25c:	80 81       	ld	r24, Z
 25e:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_ENABLE_bm;
 260:	80 81       	ld	r24, Z
 262:	81 60       	ori	r24, 0x01	; 1
 264:	80 83       	st	Z, r24
	
	ADC0.CTRLE = 0x02;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	84 83       	std	Z+4, r24	; 0x04
	sei();
 26a:	78 94       	sei
	// start conversion
	ADC0.COMMAND |= ADC_STCONV_bm;
 26c:	80 85       	ldd	r24, Z+8	; 0x08
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 87       	std	Z+8, r24	; 0x08
	result = ADC0.RES;
 272:	80 89       	ldd	r24, Z+16	; 0x10
 274:	91 89       	ldd	r25, Z+17	; 0x11
 276:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <result>
 27a:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <result+0x1>
 27e:	83 ef       	ldi	r24, 0xF3	; 243
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <single+0x2c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <single+0x32>
 288:	00 00       	nop
	_delay_ms(2);
	
	// re-set ADC to free-running
	ADC0.CTRLA |= ADC_FREERUN_bm;
 28a:	80 81       	ld	r24, Z
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	80 83       	st	Z, r24
	
	ADC0.CTRLE = 0x01;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	84 83       	std	Z+4, r24	; 0x04
		
	ADC0.DBGCTRL |= ADC_DBGRUN_bm;	
 294:	84 85       	ldd	r24, Z+12	; 0x0c
 296:	81 60       	ori	r24, 0x01	; 1
 298:	84 87       	std	Z+12, r24	; 0x0c
 29a:	08 95       	ret

0000029c <main>:

int main(void)
{

	// PIN0, turn left
	PORTD.DIR |= PIN0_bm;
 29c:	e0 e6       	ldi	r30, 0x60	; 96
 29e:	f4 e0       	ldi	r31, 0x04	; 4
 2a0:	80 81       	ld	r24, Z
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm;
 2a6:	84 81       	ldd	r24, Z+4	; 0x04
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	84 83       	std	Z+4, r24	; 0x04
	
	// PIN1, turn right
	PORTD.DIR |= PIN1_bm;
 2ac:	80 81       	ld	r24, Z
 2ae:	82 60       	ori	r24, 0x02	; 2
 2b0:	80 83       	st	Z, r24
	PORTD.OUT |= PIN1_bm;
 2b2:	84 81       	ldd	r24, Z+4	; 0x04
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	84 83       	std	Z+4, r24	; 0x04
	
	// PIN2, represents straight line
	PORTD.DIR |= PIN2_bm;
 2b8:	80 81       	ld	r24, Z
 2ba:	84 60       	ori	r24, 0x04	; 4
 2bc:	80 83       	st	Z, r24
	// turn on straight's led
	PORTD.OUTCLR = PIN2_bm;
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	86 83       	std	Z+6, r24	; 0x06
	

	// initialize ADC
	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;
 2c2:	e0 e0       	ldi	r30, 0x00	; 0
 2c4:	f6 e0       	ldi	r31, 0x06	; 6
 2c6:	80 81       	ld	r24, Z
 2c8:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_FREERUN_bm;
 2ca:	80 81       	ld	r24, Z
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_ENABLE_bm;
 2d0:	80 81       	ld	r24, Z
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	80 83       	st	Z, r24
	ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc;
 2d6:	86 81       	ldd	r24, Z+6	; 0x06
 2d8:	87 60       	ori	r24, 0x07	; 7
 2da:	86 83       	std	Z+6, r24	; 0x06
	
	ADC0.DBGCTRL |= ADC_DBGRUN_bm;
 2dc:	84 85       	ldd	r24, Z+12	; 0x0c
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	84 87       	std	Z+12, r24	; 0x0c
	
	// limit is 5
	ADC0.WINLT |= 5;
 2e2:	82 89       	ldd	r24, Z+18	; 0x12
 2e4:	93 89       	ldd	r25, Z+19	; 0x13
 2e6:	85 60       	ori	r24, 0x05	; 5
 2e8:	82 8b       	std	Z+18, r24	; 0x12
 2ea:	93 8b       	std	Z+19, r25	; 0x13
	ADC0.WINHT |= 20;
 2ec:	84 89       	ldd	r24, Z+20	; 0x14
 2ee:	95 89       	ldd	r25, Z+21	; 0x15
 2f0:	84 61       	ori	r24, 0x14	; 20
 2f2:	84 8b       	std	Z+20, r24	; 0x14
 2f4:	95 8b       	std	Z+21, r25	; 0x15
	ADC0.INTCTRL |= ADC_WCMP_bm;
 2f6:	82 85       	ldd	r24, Z+10	; 0x0a
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE |= ADC_WINCM0_bm;
 2fc:	84 81       	ldd	r24, Z+4	; 0x04
 2fe:	81 60       	ori	r24, 0x01	; 1
 300:	84 83       	std	Z+4, r24	; 0x04
	
	// switch interrupt enable
	PORTF.PIN5CTRL |= (PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc);
 302:	a0 ea       	ldi	r26, 0xA0	; 160
 304:	b4 e0       	ldi	r27, 0x04	; 4
 306:	55 96       	adiw	r26, 0x15	; 21
 308:	8c 91       	ld	r24, X
 30a:	55 97       	sbiw	r26, 0x15	; 21
 30c:	89 60       	ori	r24, 0x09	; 9
 30e:	55 96       	adiw	r26, 0x15	; 21
 310:	8c 93       	st	X, r24
	
	//Timer set up
	TCA0.SINGLE.CNT = 0; //Clear counter
 312:	a0 e0       	ldi	r26, 0x00	; 0
 314:	ba e0       	ldi	r27, 0x0A	; 10
 316:	90 96       	adiw	r26, 0x20	; 32
 318:	1d 92       	st	X+, r1
 31a:	1c 92       	st	X, r1
 31c:	91 97       	sbiw	r26, 0x21	; 33
	TCA0.SINGLE.CTRLB = 0; //Normal Mode
 31e:	11 96       	adiw	r26, 0x01	; 1
 320:	1c 92       	st	X, r1
 322:	11 97       	sbiw	r26, 0x01	; 1
	TCA0.SINGLE.CMP0 = t; //Stop turning when this value is reached
 324:	8a e0       	ldi	r24, 0x0A	; 10
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	98 96       	adiw	r26, 0x28	; 40
 32a:	8d 93       	st	X+, r24
 32c:	9c 93       	st	X, r25
 32e:	99 97       	sbiw	r26, 0x29	; 41
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;
 330:	8e e0       	ldi	r24, 0x0E	; 14
 332:	8c 93       	st	X, r24
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm;
 334:	80 e1       	ldi	r24, 0x10	; 16
 336:	1a 96       	adiw	r26, 0x0a	; 10
 338:	8c 93       	st	X, r24
	
	sei();
 33a:	78 94       	sei
	// start conversion
	ADC0.COMMAND |= ADC_STCONV_bm;
 33c:	80 85       	ldd	r24, Z+8	; 0x08
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	80 87       	std	Z+8, r24	; 0x08
	
	while(1){
		// go straight
		PORTD.OUTCLR = PIN2_bm;
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
 348:	89 ef       	ldi	r24, 0xF9	; 249
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <main+0xb0>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0xb6>
 352:	00 00       	nop
		_delay_ms(1);
		// check for right distance
		single();
 354:	0e 94 2b 01 	call	0x256	; 0x256 <single>
		
		// perimeter is completed. Stop device
		if(!still)
 358:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 35c:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 360:	89 2b       	or	r24, r25
 362:	79 f7       	brne	.-34     	; 0x342 <main+0xa6>
			break;
	}
}
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	08 95       	ret

0000036a <__vector_29>:
	ADC0.CTRLE = 0x01;
		
	ADC0.DBGCTRL |= ADC_DBGRUN_bm;	
}

ISR(PORTF_PORT_vect) {
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	ef 93       	push	r30
 37a:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
 37c:	e0 ea       	ldi	r30, 0xA0	; 160
 37e:	f4 e0       	ldi	r31, 0x04	; 4
 380:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS = intflags;
 382:	81 87       	std	Z+9, r24	; 0x09
	
	reverse = 1;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
 38c:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <__data_end+0x1>
	
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
