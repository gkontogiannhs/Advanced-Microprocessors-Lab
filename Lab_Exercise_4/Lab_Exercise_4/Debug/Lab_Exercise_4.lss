
Lab_Exercise_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00802800  00802800  000004a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003229  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002355  00000000  00000000  0000379d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005be  00000000  00000000  00005af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000060b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000186a  00000000  00000000  00006230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  00007a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00007e09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_9>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_12>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_23>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	ae 30       	cpi	r26, 0x0E	; 14
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  b0:	0c 94 15 02 	jmp	0x42a	; 0x42a <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <enable_alarm>:
}

void enable_alarm()
{
	// make sure pass_input = 0
	pass_input = 0;
  b8:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <pass_input>
  bc:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <pass_input+0x1>
	sei();
  c0:	78 94       	sei
	while(!pass_input){
  c2:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <pass_input>
  c6:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <pass_input+0x1>
  ca:	89 2b       	or	r24, r25
  cc:	d1 f3       	breq	.-12     	; 0xc2 <enable_alarm+0xa>
		;
	}
	//pass_input = 0;
	//Timer set up
	TCA0.SINGLE.CNT = 0; //Clear counter
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	fa e0       	ldi	r31, 0x0A	; 10
  d2:	10 a2       	std	Z+32, r1	; 0x20
  d4:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SINGLE.CTRLB = 0; //Normal Mode
  d6:	11 82       	std	Z+1, r1	; 0x01
	TCA0.SINGLE.CMP0 = 5; //Stop turning when this value is reached
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	80 a7       	std	Z+40, r24	; 0x28
  de:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLA |= 1;
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm;
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	82 87       	std	Z+10, r24	; 0x0a
	
	// start conversion
	ADC0.COMMAND |= ADC_STCONV_bm;
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f6 e0       	ldi	r31, 0x06	; 6
  f2:	80 85       	ldd	r24, Z+8	; 0x08
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	80 87       	std	Z+8, r24	; 0x08

	while(!timer_after_pass){
  f8:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <timer_after_pass>
  fc:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <timer_after_pass+0x1>
 100:	89 2b       	or	r24, r25
 102:	d1 f3       	breq	.-12     	; 0xf8 <enable_alarm+0x40>
		;// waiting for timer
	}
	cli();
 104:	f8 94       	cli
 106:	08 95       	ret

00000108 <ADC_init>:

void ADC_init(void)
{
	
	// initialize ADC
	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;
 108:	e0 e0       	ldi	r30, 0x00	; 0
 10a:	f6 e0       	ldi	r31, 0x06	; 6
 10c:	80 81       	ld	r24, Z
 10e:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_FREERUN_bm;
 110:	80 81       	ld	r24, Z
 112:	82 60       	ori	r24, 0x02	; 2
 114:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_ENABLE_bm;
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
	ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc;
 11c:	86 81       	ldd	r24, Z+6	; 0x06
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	86 83       	std	Z+6, r24	; 0x06
	
	ADC0.DBGCTRL |= ADC_DBGRUN_bm;
 122:	84 85       	ldd	r24, Z+12	; 0x0c
 124:	81 60       	ori	r24, 0x01	; 1
 126:	84 87       	std	Z+12, r24	; 0x0c
	
	// limit is 5
	ADC0.WINLT |= 10;
 128:	82 89       	ldd	r24, Z+18	; 0x12
 12a:	93 89       	ldd	r25, Z+19	; 0x13
 12c:	8a 60       	ori	r24, 0x0A	; 10
 12e:	82 8b       	std	Z+18, r24	; 0x12
 130:	93 8b       	std	Z+19, r25	; 0x13
	ADC0.INTCTRL |= ADC_WCMP_bm;
 132:	82 85       	ldd	r24, Z+10	; 0x0a
 134:	82 60       	ori	r24, 0x02	; 2
 136:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE |= ADC_WINCM0_bm;
 138:	84 81       	ldd	r24, Z+4	; 0x04
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	84 83       	std	Z+4, r24	; 0x04
	
	sei();
 13e:	78 94       	sei
	// START CONVERSION
	ADC0.COMMAND |= ADC_STCONV_bm;
 140:	80 85       	ldd	r24, Z+8	; 0x08
 142:	81 60       	ori	r24, 0x01	; 1
 144:	80 87       	std	Z+8, r24	; 0x08
	// wait till find target
	while(!is_robbed){
 146:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <is_robbed>
 14a:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <is_robbed+0x1>
 14e:	89 2b       	or	r24, r25
 150:	d1 f3       	breq	.-12     	; 0x146 <ADC_init+0x3e>
		;
	}
	cli();
 152:	f8 94       	cli
 154:	08 95       	ret

00000156 <disable_alarm>:
	
}

void disable_alarm(){
	//Timer set up
	TCA0.SINGLE.CNT = 0; //Clear counter
 156:	e0 e0       	ldi	r30, 0x00	; 0
 158:	fa e0       	ldi	r31, 0x0A	; 10
 15a:	10 a2       	std	Z+32, r1	; 0x20
 15c:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SINGLE.CTRLB = 0; //Normal Mode
 15e:	11 82       	std	Z+1, r1	; 0x01
	TCA0.SINGLE.CMP0 = 10; //Stop turning when this value is reached
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	80 a7       	std	Z+40, r24	; 0x28
 166:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;
 168:	8e e0       	ldi	r24, 0x0E	; 14
 16a:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLA |= 1;
 16c:	80 81       	ld	r24, Z
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	80 83       	st	Z, r24
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm;
 172:	80 e1       	ldi	r24, 0x10	; 16
 174:	82 87       	std	Z+10, r24	; 0x0a
	cli();
 176:	f8 94       	cli
	
	// start conversion
	ADC0.COMMAND |= ADC_STCONV_bm;
 178:	e0 e0       	ldi	r30, 0x00	; 0
 17a:	f6 e0       	ldi	r31, 0x06	; 6
 17c:	80 85       	ldd	r24, Z+8	; 0x08
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 87       	std	Z+8, r24	; 0x08
	sei();
 182:	78 94       	sei
	while(!is_robbed_timer){
 184:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <is_robbed_timer>
 188:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <is_robbed_timer+0x1>
 18c:	89 2b       	or	r24, r25
 18e:	d1 f3       	breq	.-12     	; 0x184 <disable_alarm+0x2e>
		// waiting for timer
	}
	cli();
 190:	f8 94       	cli
 192:	08 95       	ret

00000194 <main>:
int pulses = 0;

int main(void){
	
	// led 0 is output
	PORTD.DIR |= PIN0_bm;
 194:	e0 e6       	ldi	r30, 0x60	; 96
 196:	f4 e0       	ldi	r31, 0x04	; 4
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm;
 19e:	84 81       	ldd	r24, Z+4	; 0x04
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	84 83       	std	Z+4, r24	; 0x04
	
	// set switches
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 1a4:	e0 ea       	ldi	r30, 0xA0	; 160
 1a6:	f4 e0       	ldi	r31, 0x04	; 4
 1a8:	85 89       	ldd	r24, Z+21	; 0x15
 1aa:	89 60       	ori	r24, 0x09	; 9
 1ac:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 1ae:	86 89       	ldd	r24, Z+22	; 0x16
 1b0:	89 60       	ori	r24, 0x09	; 9
 1b2:	86 8b       	std	Z+22, r24	; 0x16
	
	while(1){
		enable_alarm();
 1b4:	0e 94 5c 00 	call	0xb8	; 0xb8 <enable_alarm>
		
		ADC_init();
 1b8:	0e 94 84 00 	call	0x108	; 0x108 <ADC_init>
		
		disable_alarm();
 1bc:	0e 94 ab 00 	call	0x156	; 0x156 <disable_alarm>
 1c0:	f9 cf       	rjmp	.-14     	; 0x1b4 <main+0x20>

000001c2 <siren>:
	cli();
}

void siren(){
	/* Load the Compare or Capture register with the timeout value*/
	TCB0.CCMP = 0x1020;
 1c2:	e0 e8       	ldi	r30, 0x80	; 128
 1c4:	fa e0       	ldi	r31, 0x0A	; 10
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	90 e1       	ldi	r25, 0x10	; 16
 1ca:	84 87       	std	Z+12, r24	; 0x0c
 1cc:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.CNT = 0;
 1ce:	12 86       	std	Z+10, r1	; 0x0a
 1d0:	13 86       	std	Z+11, r1	; 0x0b
	/* Enable TCB3 and Divide CLK_PER by 2 */
	TCB0.CTRLA |= TCB_ENABLE_bm;
 1d2:	80 81       	ld	r24, Z
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	80 83       	st	Z, r24
	TCB0.CTRLA |= TCB_CLKSEL_CLKDIV2_gc;
 1d8:	80 81       	ld	r24, Z
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24
	TCB0.INTCTRL |= TCB_CAPT_bm;
 1de:	85 81       	ldd	r24, Z+5	; 0x05
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	85 83       	std	Z+5, r24	; 0x05

	/* Enable Pin Output and configure TCB in 8-bit PWM mode */
	TCB0.CTRLB |= TCB_CCMPEN_bm;
 1e4:	81 81       	ldd	r24, Z+1	; 0x01
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	81 83       	std	Z+1, r24	; 0x01
	TCB0.CTRLB |= TCB_CNTMODE_PWM8_gc;
 1ea:	81 81       	ldd	r24, Z+1	; 0x01
 1ec:	87 60       	ori	r24, 0x07	; 7
 1ee:	81 83       	std	Z+1, r24	; 0x01
 1f0:	08 95       	ret

000001f2 <__vector_29>:
}


ISR(PORTF_PORT_vect){
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	/* Get flags to check for left or right */
	int intflags = PORTF.INTFLAGS;
 218:	c0 91 a9 04 	lds	r28, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
	
	/* If switch5 */
	int sw5 = intflags &= ~(00100000);
 21c:	d0 e0       	ldi	r29, 0x00	; 0
	int sw6 = intflags &= ~(01000000);
	
	if(sw6 == 64 && pass_counter == 0 || pass_counter == 3){
 21e:	c0 34       	cpi	r28, 0x40	; 64
 220:	d1 05       	cpc	r29, r1
 222:	31 f4       	brne	.+12     	; 0x230 <__vector_29+0x3e>
 224:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <pass_counter>
 228:	90 91 0d 28 	lds	r25, 0x280D	; 0x80280d <pass_counter+0x1>
 22c:	89 2b       	or	r24, r25
 22e:	39 f0       	breq	.+14     	; 0x23e <__vector_29+0x4c>
 230:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <pass_counter>
 234:	90 91 0d 28 	lds	r25, 0x280D	; 0x80280d <pass_counter+0x1>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	91 05       	cpc	r25, r1
 23c:	51 f4       	brne	.+20     	; 0x252 <__vector_29+0x60>
		pass_counter++;
 23e:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <pass_counter>
 242:	90 91 0d 28 	lds	r25, 0x280D	; 0x80280d <pass_counter+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <pass_counter>
 24c:	90 93 0d 28 	sts	0x280D, r25	; 0x80280d <pass_counter+0x1>
 250:	1c c0       	rjmp	.+56     	; 0x28a <__vector_29+0x98>
	}
	else if(sw5 == 32 && pass_counter == 1 || pass_counter == 2){
 252:	c0 32       	cpi	r28, 0x20	; 32
 254:	d1 05       	cpc	r29, r1
 256:	19 f4       	brne	.+6      	; 0x25e <__vector_29+0x6c>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	91 05       	cpc	r25, r1
 25c:	19 f0       	breq	.+6      	; 0x264 <__vector_29+0x72>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	91 05       	cpc	r25, r1
 262:	31 f4       	brne	.+12     	; 0x270 <__vector_29+0x7e>
		pass_counter++;
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <pass_counter>
 26a:	90 93 0d 28 	sts	0x280D, r25	; 0x80280d <pass_counter+0x1>
 26e:	0d c0       	rjmp	.+26     	; 0x28a <__vector_29+0x98>
	}
	else{
		pass_counter = 0;
 270:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <pass_counter>
 274:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <pass_counter+0x1>
		tries++;
 278:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <tries>
 27c:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <tries+0x1>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <tries>
 286:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <tries+0x1>
	}
	
	if (tries == 3){
 28a:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <tries>
 28e:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <tries+0x1>
 292:	03 97       	sbiw	r24, 0x03	; 3
 294:	19 f4       	brne	.+6      	; 0x29c <__vector_29+0xaa>
		siren();
 296:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <siren>
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <__vector_29+0xd2>
	}
	else if(pass_counter == 4){
 29c:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <pass_counter>
 2a0:	90 91 0d 28 	lds	r25, 0x280D	; 0x80280d <pass_counter+0x1>
 2a4:	04 97       	sbiw	r24, 0x04	; 4
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <__vector_29+0xd2>
		// clear pass_counter
		pass_counter = 0;
 2a8:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <pass_counter>
 2ac:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <pass_counter+0x1>
		is_robbed_timer = 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <is_robbed_timer>
 2b8:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <is_robbed_timer+0x1>
		pass_input = 1;
 2bc:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <pass_input>
 2c0:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <pass_input+0x1>
	}
	
	// clear flags
	PORTF.INTFLAGS = intflags;
 2c4:	c0 93 a9 04 	sts	0x04A9, r28	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
	
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_9>:

ISR(TCA0_CMP0_vect){
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
	//Clear timer interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
 310:	e0 e0       	ldi	r30, 0x00	; 0
 312:	fa e0       	ldi	r31, 0x0A	; 10
 314:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 316:	83 87       	std	Z+11, r24	; 0x0b
	
	if(pass_input == 1){
 318:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <pass_input>
 31c:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <pass_input+0x1>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	91 05       	cpc	r25, r1
 324:	69 f4       	brne	.+26     	; 0x340 <__vector_9+0x52>
		//Disable Timer
		TCA0.SINGLE.CTRLA = 0;
 326:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
		// turn on flag to flag time to leave home is over
		timer_after_pass = 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <timer_after_pass>
 332:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <timer_after_pass+0x1>
		// clear correct password flag
		pass_input = 0;
 336:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <pass_input>
 33a:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <pass_input+0x1>
 33e:	04 c0       	rjmp	.+8      	; 0x348 <__vector_9+0x5a>
	}
	else if(pass_input == 0){
 340:	89 2b       	or	r24, r25
 342:	11 f4       	brne	.+4      	; 0x348 <__vector_9+0x5a>
		siren();
 344:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <siren>
	}
}
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_23>:


ISR(ADC0_WCOMP_vect){
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	ef 93       	push	r30
 37a:	ff 93       	push	r31
	// clear flags
	int intflags = ADC0.INTFLAGS;
 37c:	e0 e0       	ldi	r30, 0x00	; 0
 37e:	f6 e0       	ldi	r31, 0x06	; 6
 380:	83 85       	ldd	r24, Z+11	; 0x0b
	ADC0.INTFLAGS = intflags;
 382:	83 87       	std	Z+11, r24	; 0x0b

	// set is robbed variable = 1
	is_robbed = 1;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <is_robbed>
 38c:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <is_robbed+0x1>
	
	is_robbed_timer = 0;
 390:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <is_robbed_timer>
 394:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <is_robbed_timer+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	89 ef       	ldi	r24, 0xF9	; 249
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <__vector_23+0x32>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <__vector_23+0x38>
 3a2:	00 00       	nop
	
	// turn LED0 on
	_delay_ms(1);
	PORTD.OUTCLR = PIN0_bm;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_12>:



ISR(TCB0_INT_vect)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	8f 93       	push	r24
 3ca:	9f 93       	push	r25
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
	if (pass_counter != 4){
 3d0:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <pass_counter>
 3d4:	90 91 0d 28 	lds	r25, 0x280D	; 0x80280d <pass_counter+0x1>
 3d8:	04 97       	sbiw	r24, 0x04	; 4
 3da:	a9 f0       	breq	.+42     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		/* if even, turn on */
		if (pulses % 2 == 0)
 3dc:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 3e0:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 3e4:	80 fd       	sbrc	r24, 0
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <__vector_12+0x34>
			PORTD.OUTCLR = PIN0_bm;
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	20 93 66 04 	sts	0x0466, r18	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
 3ee:	05 c0       	rjmp	.+10     	; 0x3fa <__vector_12+0x3e>
		else
			PORTD.OUT |= PIN0_bm;
 3f0:	e0 e6       	ldi	r30, 0x60	; 96
 3f2:	f4 e0       	ldi	r31, 0x04	; 4
 3f4:	24 81       	ldd	r18, Z+4	; 0x04
 3f6:	21 60       	ori	r18, 0x01	; 1
 3f8:	24 83       	std	Z+4, r18	; 0x04
		pulses++;	
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 400:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	}
	else{
		// disable pwm
		TCB0.CTRLA = 0;
 406:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
	}
	TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear the interrupt flag */
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	PORTB.IN = PIN5_bm;
 410:	80 e2       	ldi	r24, 0x20	; 32
 412:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
